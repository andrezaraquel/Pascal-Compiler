/*
 * generated by Xtext 2.10.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.pascal.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.pascal.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}
@parser::members {
	private PascalGrammarAccess grammarAccess;

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBegin
entryRuleBegin
:
{ before(grammarAccess.getBeginRule()); }
	 ruleBegin
{ after(grammarAccess.getBeginRule()); } 
	 EOF 
;

// Rule Begin
ruleBegin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeginAccess().getAlternatives()); }
		(rule__Begin__Alternatives)
		{ after(grammarAccess.getBeginAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getAlternatives()); }
		(rule__Function__Alternatives)
		{ after(grammarAccess.getFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedure
entryRuleProcedure
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAccess().getAlternatives()); }
		(rule__Procedure__Alternatives)
		{ after(grammarAccess.getProcedureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getTypeAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeginAccess().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getBeginAccess().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBeginAccess().getProcedureParserRuleCall_1()); }
		ruleProcedure
		{ after(grammarAccess.getBeginAccess().getProcedureParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup_0()); }
		(rule__Function__Group_0__0)
		{ after(grammarAccess.getFunctionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getGroup_1()); }
		(rule__Function__Group_1__0)
		{ after(grammarAccess.getFunctionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getGroup_0()); }
		(rule__Procedure__Group_0__0)
		{ after(grammarAccess.getProcedureAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcedureAccess().getGroup_1()); }
		(rule__Procedure__Group_1__0)
		{ after(grammarAccess.getProcedureAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__0__Impl
	rule__Function__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__1__Impl
	rule__Function__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0_1()); }
	(rule__Function__NameAssignment_0_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__2__Impl
	rule__Function__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisRightParenthesisKeyword_0_2()); }
	'()'
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__3__Impl
	rule__Function__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_0_3()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__4__Impl
	rule__Function__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnKeyword_0_4()); }
	'return'
	{ after(grammarAccess.getFunctionAccess().getReturnKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__5__Impl
	rule__Function__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0_5()); }
	(rule__Function__NameAssignment_0_5)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_0__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_0_6()); }
	';'
	{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__0__Impl
	rule__Function__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_1_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__1__Impl
	rule__Function__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1_1()); }
	(rule__Function__NameAssignment_1_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__2__Impl
	rule__Function__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__3__Impl
	rule__Function__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1_3()); }
	(rule__Function__NameAssignment_1_3)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__4__Impl
	rule__Function__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_1_4()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__5__Impl
	rule__Function__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_5()); }
	ruleType
	{ after(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__6__Impl
	rule__Function__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_1_6()); }
	(rule__Function__Group_1_6__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__7__Impl
	rule__Function__Group_1__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_1_7()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_1_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__8__Impl
	rule__Function__Group_1__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_1_8()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_1_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__9__Impl
	rule__Function__Group_1__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnKeyword_1_9()); }
	'return'
	{ after(grammarAccess.getFunctionAccess().getReturnKeyword_1_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__10__Impl
	rule__Function__Group_1__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1_10()); }
	(rule__Function__NameAssignment_1_10)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_1_11()); }
	';'
	{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_1_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1_6__0__Impl
	rule__Function__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_1_6_0()); }
	';'
	{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_1_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1_6__1__Impl
	rule__Function__Group_1_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1_6_1()); }
	(rule__Function__NameAssignment_1_6_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1_6__2__Impl
	rule__Function__Group_1_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_1_6_2()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_1_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_6_3()); }
	ruleType
	{ after(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_0__0__Impl
	rule__Procedure__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0_0()); }
	'procedure'
	{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_0__1__Impl
	rule__Procedure__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_0_1()); }
	(rule__Procedure__NameAssignment_0_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_0__2__Impl
	rule__Procedure__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getLeftParenthesisRightParenthesisKeyword_0_2()); }
	'()'
	{ after(grammarAccess.getProcedureAccess().getLeftParenthesisRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getSemicolonKeyword_0_3()); }
	';'
	{ after(grammarAccess.getProcedureAccess().getSemicolonKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__0__Impl
	rule__Procedure__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_1_0()); }
	'procedure'
	{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__1__Impl
	rule__Procedure__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1_1()); }
	(rule__Procedure__NameAssignment_1_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__2__Impl
	rule__Procedure__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1_2()); }
	'('
	{ after(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__3__Impl
	rule__Procedure__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1_3()); }
	(rule__Procedure__NameAssignment_1_3)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__4__Impl
	rule__Procedure__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getColonKeyword_1_4()); }
	':'
	{ after(grammarAccess.getProcedureAccess().getColonKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__5__Impl
	rule__Procedure__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_5()); }
	ruleType
	{ after(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__6__Impl
	rule__Procedure__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getGroup_1_6()); }
	(rule__Procedure__Group_1_6__0)*
	{ after(grammarAccess.getProcedureAccess().getGroup_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__7__Impl
	rule__Procedure__Group_1__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_1_7()); }
	')'
	{ after(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_1_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getSemicolonKeyword_1_8()); }
	';'
	{ after(grammarAccess.getProcedureAccess().getSemicolonKeyword_1_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_1_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1_6__0__Impl
	rule__Procedure__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getSemicolonKeyword_1_6_0()); }
	';'
	{ after(grammarAccess.getProcedureAccess().getSemicolonKeyword_1_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1_6__1__Impl
	rule__Procedure__Group_1_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1_6_1()); }
	(rule__Procedure__NameAssignment_1_6_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1_6__2__Impl
	rule__Procedure__Group_1_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getColonKeyword_1_6_2()); }
	':'
	{ after(grammarAccess.getProcedureAccess().getColonKeyword_1_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_1_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_6_3()); }
	ruleType
	{ after(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_5_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_3_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_6_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_10_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_3_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_6_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
