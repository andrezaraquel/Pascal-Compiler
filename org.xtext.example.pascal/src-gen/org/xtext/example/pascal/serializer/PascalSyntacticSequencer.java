/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.pascal.services.PascalGrammarAccess;

@SuppressWarnings("all")
public class PascalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PascalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_case_statement_SemicolonKeyword_5_q;
	protected AbstractElementAlias match_field_list_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_for_statement_DowntoKeyword_4_1_or_ToKeyword_4_0;
	protected AbstractElementAlias match_scale_factor_EKeyword_0_0_or_EKeyword_0_1;
	protected AbstractElementAlias match_structured_type_PackedKeyword_0_q;
	protected AbstractElementAlias match_variable_CircumflexAccentKeyword_3_a;
	protected AbstractElementAlias match_variable_CircumflexAccentKeyword_4_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PascalGrammarAccess) access;
		match_case_statement_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getCase_statementAccess().getSemicolonKeyword_5());
		match_field_list_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getField_listAccess().getSemicolonKeyword_1_1());
		match_for_statement_DowntoKeyword_4_1_or_ToKeyword_4_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFor_statementAccess().getDowntoKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getFor_statementAccess().getToKeyword_4_0()));
		match_scale_factor_EKeyword_0_0_or_EKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getScale_factorAccess().getEKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getScale_factorAccess().getEKeyword_0_1()));
		match_structured_type_PackedKeyword_0_q = new TokenAlias(false, true, grammarAccess.getStructured_typeAccess().getPackedKeyword_0());
		match_variable_CircumflexAccentKeyword_3_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_3());
		match_variable_CircumflexAccentKeyword_4_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAddition_operatorRule())
			return getaddition_operatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * addition_operator:
	 * 	sign | "or"
	 * ;
	 */
	protected String getaddition_operatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_case_statement_SemicolonKeyword_5_q.equals(syntax))
				emit_case_statement_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_field_list_SemicolonKeyword_1_1_q.equals(syntax))
				emit_field_list_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_for_statement_DowntoKeyword_4_1_or_ToKeyword_4_0.equals(syntax))
				emit_for_statement_DowntoKeyword_4_1_or_ToKeyword_4_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_scale_factor_EKeyword_0_0_or_EKeyword_0_1.equals(syntax))
				emit_scale_factor_EKeyword_0_0_or_EKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_structured_type_PackedKeyword_0_q.equals(syntax))
				emit_structured_type_PackedKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variable_CircumflexAccentKeyword_3_a.equals(syntax))
				emit_variable_CircumflexAccentKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variable_CircumflexAccentKeyword_4_a.equals(syntax))
				emit_variable_CircumflexAccentKeyword_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     case_limb+=case_limb (ambiguity) 'end' (rule end)
	 */
	protected void emit_case_statement_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     fixed_part=fixed_part (ambiguity) (rule end)
	 *     variant_part=variant_part (ambiguity) (rule end)
	 */
	protected void emit_field_list_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'to' | 'downto'
	 *
	 * This ambiguous syntax occurs at:
	 *     initial_expression=initial_expression (ambiguity) final_expression=final_expression
	 */
	protected void emit_for_statement_DowntoKeyword_4_1_or_ToKeyword_4_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'E' | 'e'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) digit_sequence=digit_sequence
	 *     (rule start) (ambiguity) sign=sign
	 */
	protected void emit_scale_factor_EKeyword_0_0_or_EKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'packed'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) unpacked_structured_type=unpacked_structured_type
	 */
	protected void emit_structured_type_PackedKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     entire_variable=entire_variable (ambiguity) '^'* (rule end)
	 *     expression_list+=expression_list ']' (ambiguity) '^'* (rule end)
	 *     field_identifier+=identifier (ambiguity) '^'* (rule end)
	 */
	protected void emit_variable_CircumflexAccentKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     entire_variable=entire_variable '^'* (ambiguity) (rule end)
	 *     expression_list+=expression_list ']' '^'* (ambiguity) (rule end)
	 *     field_identifier+=identifier '^'* (ambiguity) (rule end)
	 */
	protected void emit_variable_CircumflexAccentKeyword_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
