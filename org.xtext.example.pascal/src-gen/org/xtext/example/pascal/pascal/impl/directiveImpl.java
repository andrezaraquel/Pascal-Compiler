/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.compiler_defined_directives;
import org.xtext.example.pascal.pascal.directive;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.directiveImpl#getCompiler_defined_directives <em>Compiler defined directives</em>}</li>
 * </ul>
 *
 * @generated
 */
public class directiveImpl extends MinimalEObjectImpl.Container implements directive
{
  /**
   * The cached value of the '{@link #getCompiler_defined_directives() <em>Compiler defined directives</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompiler_defined_directives()
   * @generated
   * @ordered
   */
  protected compiler_defined_directives compiler_defined_directives;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected directiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compiler_defined_directives getCompiler_defined_directives()
  {
    return compiler_defined_directives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompiler_defined_directives(compiler_defined_directives newCompiler_defined_directives, NotificationChain msgs)
  {
    compiler_defined_directives oldCompiler_defined_directives = compiler_defined_directives;
    compiler_defined_directives = newCompiler_defined_directives;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES, oldCompiler_defined_directives, newCompiler_defined_directives);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompiler_defined_directives(compiler_defined_directives newCompiler_defined_directives)
  {
    if (newCompiler_defined_directives != compiler_defined_directives)
    {
      NotificationChain msgs = null;
      if (compiler_defined_directives != null)
        msgs = ((InternalEObject)compiler_defined_directives).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES, null, msgs);
      if (newCompiler_defined_directives != null)
        msgs = ((InternalEObject)newCompiler_defined_directives).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES, null, msgs);
      msgs = basicSetCompiler_defined_directives(newCompiler_defined_directives, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES, newCompiler_defined_directives, newCompiler_defined_directives));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES:
        return basicSetCompiler_defined_directives(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES:
        return getCompiler_defined_directives();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES:
        setCompiler_defined_directives((compiler_defined_directives)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES:
        setCompiler_defined_directives((compiler_defined_directives)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.DIRECTIVE__COMPILER_DEFINED_DIRECTIVES:
        return compiler_defined_directives != null;
    }
    return super.eIsSet(featureID);
  }

} //directiveImpl
