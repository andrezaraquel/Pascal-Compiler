/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.final_expression;
import org.xtext.example.pascal.pascal.for_statement;
import org.xtext.example.pascal.pascal.identifier;
import org.xtext.example.pascal.pascal.initial_expression;
import org.xtext.example.pascal.pascal.statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>for statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.for_statementImpl#getVariable_identifier <em>Variable identifier</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.for_statementImpl#getInitial_expression <em>Initial expression</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.for_statementImpl#getFinal_expression <em>Final expression</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.for_statementImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class for_statementImpl extends MinimalEObjectImpl.Container implements for_statement
{
  /**
   * The cached value of the '{@link #getVariable_identifier() <em>Variable identifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable_identifier()
   * @generated
   * @ordered
   */
  protected identifier variable_identifier;

  /**
   * The cached value of the '{@link #getInitial_expression() <em>Initial expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_expression()
   * @generated
   * @ordered
   */
  protected initial_expression initial_expression;

  /**
   * The cached value of the '{@link #getFinal_expression() <em>Final expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinal_expression()
   * @generated
   * @ordered
   */
  protected final_expression final_expression;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected statement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected for_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.FOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public identifier getVariable_identifier()
  {
    return variable_identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable_identifier(identifier newVariable_identifier, NotificationChain msgs)
  {
    identifier oldVariable_identifier = variable_identifier;
    variable_identifier = newVariable_identifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER, oldVariable_identifier, newVariable_identifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable_identifier(identifier newVariable_identifier)
  {
    if (newVariable_identifier != variable_identifier)
    {
      NotificationChain msgs = null;
      if (variable_identifier != null)
        msgs = ((InternalEObject)variable_identifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER, null, msgs);
      if (newVariable_identifier != null)
        msgs = ((InternalEObject)newVariable_identifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER, null, msgs);
      msgs = basicSetVariable_identifier(newVariable_identifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER, newVariable_identifier, newVariable_identifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public initial_expression getInitial_expression()
  {
    return initial_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitial_expression(initial_expression newInitial_expression, NotificationChain msgs)
  {
    initial_expression oldInitial_expression = initial_expression;
    initial_expression = newInitial_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION, oldInitial_expression, newInitial_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitial_expression(initial_expression newInitial_expression)
  {
    if (newInitial_expression != initial_expression)
    {
      NotificationChain msgs = null;
      if (initial_expression != null)
        msgs = ((InternalEObject)initial_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION, null, msgs);
      if (newInitial_expression != null)
        msgs = ((InternalEObject)newInitial_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION, null, msgs);
      msgs = basicSetInitial_expression(newInitial_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION, newInitial_expression, newInitial_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public final_expression getFinal_expression()
  {
    return final_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFinal_expression(final_expression newFinal_expression, NotificationChain msgs)
  {
    final_expression oldFinal_expression = final_expression;
    final_expression = newFinal_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION, oldFinal_expression, newFinal_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFinal_expression(final_expression newFinal_expression)
  {
    if (newFinal_expression != final_expression)
    {
      NotificationChain msgs = null;
      if (final_expression != null)
        msgs = ((InternalEObject)final_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION, null, msgs);
      if (newFinal_expression != null)
        msgs = ((InternalEObject)newFinal_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION, null, msgs);
      msgs = basicSetFinal_expression(newFinal_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION, newFinal_expression, newFinal_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(statement newStatement, NotificationChain msgs)
  {
    statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER:
        return basicSetVariable_identifier(null, msgs);
      case PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION:
        return basicSetInitial_expression(null, msgs);
      case PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION:
        return basicSetFinal_expression(null, msgs);
      case PascalPackage.FOR_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER:
        return getVariable_identifier();
      case PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION:
        return getInitial_expression();
      case PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION:
        return getFinal_expression();
      case PascalPackage.FOR_STATEMENT__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER:
        setVariable_identifier((identifier)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION:
        setInitial_expression((initial_expression)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION:
        setFinal_expression((final_expression)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__STATEMENT:
        setStatement((statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER:
        setVariable_identifier((identifier)null);
        return;
      case PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION:
        setInitial_expression((initial_expression)null);
        return;
      case PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION:
        setFinal_expression((final_expression)null);
        return;
      case PascalPackage.FOR_STATEMENT__STATEMENT:
        setStatement((statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__VARIABLE_IDENTIFIER:
        return variable_identifier != null;
      case PascalPackage.FOR_STATEMENT__INITIAL_EXPRESSION:
        return initial_expression != null;
      case PascalPackage.FOR_STATEMENT__FINAL_EXPRESSION:
        return final_expression != null;
      case PascalPackage.FOR_STATEMENT__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

} //for_statementImpl
