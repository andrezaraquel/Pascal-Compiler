/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.expression;
import org.xtext.example.pascal.pascal.simple_expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.expressionImpl#getSimple_expression <em>Simple expression</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.expressionImpl#getRelational_operator <em>Relational operator</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.expressionImpl#getExpression <em>Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class expressionImpl extends output_valueImpl implements expression
{
  /**
   * The cached value of the '{@link #getSimple_expression() <em>Simple expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimple_expression()
   * @generated
   * @ordered
   */
  protected EList<simple_expression> simple_expression;

  /**
   * The default value of the '{@link #getRelational_operator() <em>Relational operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelational_operator()
   * @generated
   * @ordered
   */
  protected static final String RELATIONAL_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRelational_operator() <em>Relational operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelational_operator()
   * @generated
   * @ordered
   */
  protected String relational_operator = RELATIONAL_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected EList<expression> expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<simple_expression> getSimple_expression()
  {
    if (simple_expression == null)
    {
      simple_expression = new EObjectContainmentEList<simple_expression>(simple_expression.class, this, PascalPackage.EXPRESSION__SIMPLE_EXPRESSION);
    }
    return simple_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRelational_operator()
  {
    return relational_operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelational_operator(String newRelational_operator)
  {
    String oldRelational_operator = relational_operator;
    relational_operator = newRelational_operator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.EXPRESSION__RELATIONAL_OPERATOR, oldRelational_operator, relational_operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression> getExpression()
  {
    if (expression == null)
    {
      expression = new EObjectContainmentEList<expression>(expression.class, this, PascalPackage.EXPRESSION__EXPRESSION);
    }
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.EXPRESSION__SIMPLE_EXPRESSION:
        return ((InternalEList<?>)getSimple_expression()).basicRemove(otherEnd, msgs);
      case PascalPackage.EXPRESSION__EXPRESSION:
        return ((InternalEList<?>)getExpression()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.EXPRESSION__SIMPLE_EXPRESSION:
        return getSimple_expression();
      case PascalPackage.EXPRESSION__RELATIONAL_OPERATOR:
        return getRelational_operator();
      case PascalPackage.EXPRESSION__EXPRESSION:
        return getExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.EXPRESSION__SIMPLE_EXPRESSION:
        getSimple_expression().clear();
        getSimple_expression().addAll((Collection<? extends simple_expression>)newValue);
        return;
      case PascalPackage.EXPRESSION__RELATIONAL_OPERATOR:
        setRelational_operator((String)newValue);
        return;
      case PascalPackage.EXPRESSION__EXPRESSION:
        getExpression().clear();
        getExpression().addAll((Collection<? extends expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.EXPRESSION__SIMPLE_EXPRESSION:
        getSimple_expression().clear();
        return;
      case PascalPackage.EXPRESSION__RELATIONAL_OPERATOR:
        setRelational_operator(RELATIONAL_OPERATOR_EDEFAULT);
        return;
      case PascalPackage.EXPRESSION__EXPRESSION:
        getExpression().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.EXPRESSION__SIMPLE_EXPRESSION:
        return simple_expression != null && !simple_expression.isEmpty();
      case PascalPackage.EXPRESSION__RELATIONAL_OPERATOR:
        return RELATIONAL_OPERATOR_EDEFAULT == null ? relational_operator != null : !RELATIONAL_OPERATOR_EDEFAULT.equals(relational_operator);
      case PascalPackage.EXPRESSION__EXPRESSION:
        return expression != null && !expression.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (relational_operator: ");
    result.append(relational_operator);
    result.append(')');
    return result.toString();
  }

} //expressionImpl
