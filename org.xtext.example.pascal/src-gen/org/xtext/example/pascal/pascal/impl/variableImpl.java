/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.entire_variable;
import org.xtext.example.pascal.pascal.expression_list;
import org.xtext.example.pascal.pascal.identifier;
import org.xtext.example.pascal.pascal.variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.variableImpl#getEntire_variable <em>Entire variable</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.variableImpl#getExpression_list <em>Expression list</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.variableImpl#getField_identifier <em>Field identifier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class variableImpl extends MinimalEObjectImpl.Container implements variable
{
  /**
   * The cached value of the '{@link #getEntire_variable() <em>Entire variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntire_variable()
   * @generated
   * @ordered
   */
  protected entire_variable entire_variable;

  /**
   * The cached value of the '{@link #getExpression_list() <em>Expression list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression_list()
   * @generated
   * @ordered
   */
  protected EList<expression_list> expression_list;

  /**
   * The cached value of the '{@link #getField_identifier() <em>Field identifier</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField_identifier()
   * @generated
   * @ordered
   */
  protected EList<identifier> field_identifier;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected variableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public entire_variable getEntire_variable()
  {
    return entire_variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEntire_variable(entire_variable newEntire_variable, NotificationChain msgs)
  {
    entire_variable oldEntire_variable = entire_variable;
    entire_variable = newEntire_variable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.VARIABLE__ENTIRE_VARIABLE, oldEntire_variable, newEntire_variable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEntire_variable(entire_variable newEntire_variable)
  {
    if (newEntire_variable != entire_variable)
    {
      NotificationChain msgs = null;
      if (entire_variable != null)
        msgs = ((InternalEObject)entire_variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIABLE__ENTIRE_VARIABLE, null, msgs);
      if (newEntire_variable != null)
        msgs = ((InternalEObject)newEntire_variable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIABLE__ENTIRE_VARIABLE, null, msgs);
      msgs = basicSetEntire_variable(newEntire_variable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.VARIABLE__ENTIRE_VARIABLE, newEntire_variable, newEntire_variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression_list> getExpression_list()
  {
    if (expression_list == null)
    {
      expression_list = new EObjectContainmentEList<expression_list>(expression_list.class, this, PascalPackage.VARIABLE__EXPRESSION_LIST);
    }
    return expression_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<identifier> getField_identifier()
  {
    if (field_identifier == null)
    {
      field_identifier = new EObjectContainmentEList<identifier>(identifier.class, this, PascalPackage.VARIABLE__FIELD_IDENTIFIER);
    }
    return field_identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__ENTIRE_VARIABLE:
        return basicSetEntire_variable(null, msgs);
      case PascalPackage.VARIABLE__EXPRESSION_LIST:
        return ((InternalEList<?>)getExpression_list()).basicRemove(otherEnd, msgs);
      case PascalPackage.VARIABLE__FIELD_IDENTIFIER:
        return ((InternalEList<?>)getField_identifier()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__ENTIRE_VARIABLE:
        return getEntire_variable();
      case PascalPackage.VARIABLE__EXPRESSION_LIST:
        return getExpression_list();
      case PascalPackage.VARIABLE__FIELD_IDENTIFIER:
        return getField_identifier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__ENTIRE_VARIABLE:
        setEntire_variable((entire_variable)newValue);
        return;
      case PascalPackage.VARIABLE__EXPRESSION_LIST:
        getExpression_list().clear();
        getExpression_list().addAll((Collection<? extends expression_list>)newValue);
        return;
      case PascalPackage.VARIABLE__FIELD_IDENTIFIER:
        getField_identifier().clear();
        getField_identifier().addAll((Collection<? extends identifier>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__ENTIRE_VARIABLE:
        setEntire_variable((entire_variable)null);
        return;
      case PascalPackage.VARIABLE__EXPRESSION_LIST:
        getExpression_list().clear();
        return;
      case PascalPackage.VARIABLE__FIELD_IDENTIFIER:
        getField_identifier().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__ENTIRE_VARIABLE:
        return entire_variable != null;
      case PascalPackage.VARIABLE__EXPRESSION_LIST:
        return expression_list != null && !expression_list.isEmpty();
      case PascalPackage.VARIABLE__FIELD_IDENTIFIER:
        return field_identifier != null && !field_identifier.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //variableImpl
