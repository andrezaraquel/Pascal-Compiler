/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.lower_bound;
import org.xtext.example.pascal.pascal.subrange_type;
import org.xtext.example.pascal.pascal.upper_bound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>subrange type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.subrange_typeImpl#getLower_bound <em>Lower bound</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.subrange_typeImpl#getUpper_bound <em>Upper bound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class subrange_typeImpl extends MinimalEObjectImpl.Container implements subrange_type
{
  /**
   * The cached value of the '{@link #getLower_bound() <em>Lower bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower_bound()
   * @generated
   * @ordered
   */
  protected lower_bound lower_bound;

  /**
   * The cached value of the '{@link #getUpper_bound() <em>Upper bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpper_bound()
   * @generated
   * @ordered
   */
  protected upper_bound upper_bound;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected subrange_typeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.SUBRANGE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public lower_bound getLower_bound()
  {
    return lower_bound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLower_bound(lower_bound newLower_bound, NotificationChain msgs)
  {
    lower_bound oldLower_bound = lower_bound;
    lower_bound = newLower_bound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.SUBRANGE_TYPE__LOWER_BOUND, oldLower_bound, newLower_bound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLower_bound(lower_bound newLower_bound)
  {
    if (newLower_bound != lower_bound)
    {
      NotificationChain msgs = null;
      if (lower_bound != null)
        msgs = ((InternalEObject)lower_bound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.SUBRANGE_TYPE__LOWER_BOUND, null, msgs);
      if (newLower_bound != null)
        msgs = ((InternalEObject)newLower_bound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.SUBRANGE_TYPE__LOWER_BOUND, null, msgs);
      msgs = basicSetLower_bound(newLower_bound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.SUBRANGE_TYPE__LOWER_BOUND, newLower_bound, newLower_bound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public upper_bound getUpper_bound()
  {
    return upper_bound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpper_bound(upper_bound newUpper_bound, NotificationChain msgs)
  {
    upper_bound oldUpper_bound = upper_bound;
    upper_bound = newUpper_bound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.SUBRANGE_TYPE__UPPER_BOUND, oldUpper_bound, newUpper_bound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpper_bound(upper_bound newUpper_bound)
  {
    if (newUpper_bound != upper_bound)
    {
      NotificationChain msgs = null;
      if (upper_bound != null)
        msgs = ((InternalEObject)upper_bound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.SUBRANGE_TYPE__UPPER_BOUND, null, msgs);
      if (newUpper_bound != null)
        msgs = ((InternalEObject)newUpper_bound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.SUBRANGE_TYPE__UPPER_BOUND, null, msgs);
      msgs = basicSetUpper_bound(newUpper_bound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.SUBRANGE_TYPE__UPPER_BOUND, newUpper_bound, newUpper_bound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.SUBRANGE_TYPE__LOWER_BOUND:
        return basicSetLower_bound(null, msgs);
      case PascalPackage.SUBRANGE_TYPE__UPPER_BOUND:
        return basicSetUpper_bound(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.SUBRANGE_TYPE__LOWER_BOUND:
        return getLower_bound();
      case PascalPackage.SUBRANGE_TYPE__UPPER_BOUND:
        return getUpper_bound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.SUBRANGE_TYPE__LOWER_BOUND:
        setLower_bound((lower_bound)newValue);
        return;
      case PascalPackage.SUBRANGE_TYPE__UPPER_BOUND:
        setUpper_bound((upper_bound)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.SUBRANGE_TYPE__LOWER_BOUND:
        setLower_bound((lower_bound)null);
        return;
      case PascalPackage.SUBRANGE_TYPE__UPPER_BOUND:
        setUpper_bound((upper_bound)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.SUBRANGE_TYPE__LOWER_BOUND:
        return lower_bound != null;
      case PascalPackage.SUBRANGE_TYPE__UPPER_BOUND:
        return upper_bound != null;
    }
    return super.eIsSet(featureID);
  }

} //subrange_typeImpl
