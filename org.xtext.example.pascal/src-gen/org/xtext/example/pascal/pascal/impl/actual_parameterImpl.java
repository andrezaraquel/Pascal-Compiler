/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.actual_function;
import org.xtext.example.pascal.pascal.actual_parameter;
import org.xtext.example.pascal.pascal.actual_procedure;
import org.xtext.example.pascal.pascal.actual_value;
import org.xtext.example.pascal.pascal.actual_variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>actual parameter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.actual_parameterImpl#getActual_value <em>Actual value</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.actual_parameterImpl#getActual_variable <em>Actual variable</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.actual_parameterImpl#getActual_procedure <em>Actual procedure</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.actual_parameterImpl#getActual_function <em>Actual function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class actual_parameterImpl extends MinimalEObjectImpl.Container implements actual_parameter
{
  /**
   * The cached value of the '{@link #getActual_value() <em>Actual value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActual_value()
   * @generated
   * @ordered
   */
  protected actual_value actual_value;

  /**
   * The cached value of the '{@link #getActual_variable() <em>Actual variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActual_variable()
   * @generated
   * @ordered
   */
  protected actual_variable actual_variable;

  /**
   * The cached value of the '{@link #getActual_procedure() <em>Actual procedure</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActual_procedure()
   * @generated
   * @ordered
   */
  protected actual_procedure actual_procedure;

  /**
   * The cached value of the '{@link #getActual_function() <em>Actual function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActual_function()
   * @generated
   * @ordered
   */
  protected actual_function actual_function;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected actual_parameterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.ACTUAL_PARAMETER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actual_value getActual_value()
  {
    return actual_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActual_value(actual_value newActual_value, NotificationChain msgs)
  {
    actual_value oldActual_value = actual_value;
    actual_value = newActual_value;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE, oldActual_value, newActual_value);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActual_value(actual_value newActual_value)
  {
    if (newActual_value != actual_value)
    {
      NotificationChain msgs = null;
      if (actual_value != null)
        msgs = ((InternalEObject)actual_value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE, null, msgs);
      if (newActual_value != null)
        msgs = ((InternalEObject)newActual_value).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE, null, msgs);
      msgs = basicSetActual_value(newActual_value, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE, newActual_value, newActual_value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actual_variable getActual_variable()
  {
    return actual_variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActual_variable(actual_variable newActual_variable, NotificationChain msgs)
  {
    actual_variable oldActual_variable = actual_variable;
    actual_variable = newActual_variable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE, oldActual_variable, newActual_variable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActual_variable(actual_variable newActual_variable)
  {
    if (newActual_variable != actual_variable)
    {
      NotificationChain msgs = null;
      if (actual_variable != null)
        msgs = ((InternalEObject)actual_variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE, null, msgs);
      if (newActual_variable != null)
        msgs = ((InternalEObject)newActual_variable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE, null, msgs);
      msgs = basicSetActual_variable(newActual_variable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE, newActual_variable, newActual_variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actual_procedure getActual_procedure()
  {
    return actual_procedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActual_procedure(actual_procedure newActual_procedure, NotificationChain msgs)
  {
    actual_procedure oldActual_procedure = actual_procedure;
    actual_procedure = newActual_procedure;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE, oldActual_procedure, newActual_procedure);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActual_procedure(actual_procedure newActual_procedure)
  {
    if (newActual_procedure != actual_procedure)
    {
      NotificationChain msgs = null;
      if (actual_procedure != null)
        msgs = ((InternalEObject)actual_procedure).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE, null, msgs);
      if (newActual_procedure != null)
        msgs = ((InternalEObject)newActual_procedure).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE, null, msgs);
      msgs = basicSetActual_procedure(newActual_procedure, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE, newActual_procedure, newActual_procedure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actual_function getActual_function()
  {
    return actual_function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActual_function(actual_function newActual_function, NotificationChain msgs)
  {
    actual_function oldActual_function = actual_function;
    actual_function = newActual_function;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION, oldActual_function, newActual_function);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActual_function(actual_function newActual_function)
  {
    if (newActual_function != actual_function)
    {
      NotificationChain msgs = null;
      if (actual_function != null)
        msgs = ((InternalEObject)actual_function).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION, null, msgs);
      if (newActual_function != null)
        msgs = ((InternalEObject)newActual_function).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION, null, msgs);
      msgs = basicSetActual_function(newActual_function, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION, newActual_function, newActual_function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE:
        return basicSetActual_value(null, msgs);
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE:
        return basicSetActual_variable(null, msgs);
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE:
        return basicSetActual_procedure(null, msgs);
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION:
        return basicSetActual_function(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE:
        return getActual_value();
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE:
        return getActual_variable();
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE:
        return getActual_procedure();
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION:
        return getActual_function();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE:
        setActual_value((actual_value)newValue);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE:
        setActual_variable((actual_variable)newValue);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE:
        setActual_procedure((actual_procedure)newValue);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION:
        setActual_function((actual_function)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE:
        setActual_value((actual_value)null);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE:
        setActual_variable((actual_variable)null);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE:
        setActual_procedure((actual_procedure)null);
        return;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION:
        setActual_function((actual_function)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VALUE:
        return actual_value != null;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_VARIABLE:
        return actual_variable != null;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_PROCEDURE:
        return actual_procedure != null;
      case PascalPackage.ACTUAL_PARAMETER__ACTUAL_FUNCTION:
        return actual_function != null;
    }
    return super.eIsSet(featureID);
  }

} //actual_parameterImpl
