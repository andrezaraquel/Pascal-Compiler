/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.pascal.pascal.PascalPackage;
import org.xtext.example.pascal.pascal.case_statement;
import org.xtext.example.pascal.pascal.conditional_statement;
import org.xtext.example.pascal.pascal.if_statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>conditional statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.conditional_statementImpl#getIf_statement <em>If statement</em>}</li>
 *   <li>{@link org.xtext.example.pascal.pascal.impl.conditional_statementImpl#getCase_statement <em>Case statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class conditional_statementImpl extends MinimalEObjectImpl.Container implements conditional_statement
{
  /**
   * The cached value of the '{@link #getIf_statement() <em>If statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf_statement()
   * @generated
   * @ordered
   */
  protected if_statement if_statement;

  /**
   * The cached value of the '{@link #getCase_statement() <em>Case statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase_statement()
   * @generated
   * @ordered
   */
  protected case_statement case_statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected conditional_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.CONDITIONAL_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public if_statement getIf_statement()
  {
    return if_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf_statement(if_statement newIf_statement, NotificationChain msgs)
  {
    if_statement oldIf_statement = if_statement;
    if_statement = newIf_statement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT, oldIf_statement, newIf_statement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf_statement(if_statement newIf_statement)
  {
    if (newIf_statement != if_statement)
    {
      NotificationChain msgs = null;
      if (if_statement != null)
        msgs = ((InternalEObject)if_statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT, null, msgs);
      if (newIf_statement != null)
        msgs = ((InternalEObject)newIf_statement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT, null, msgs);
      msgs = basicSetIf_statement(newIf_statement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT, newIf_statement, newIf_statement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public case_statement getCase_statement()
  {
    return case_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCase_statement(case_statement newCase_statement, NotificationChain msgs)
  {
    case_statement oldCase_statement = case_statement;
    case_statement = newCase_statement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT, oldCase_statement, newCase_statement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCase_statement(case_statement newCase_statement)
  {
    if (newCase_statement != case_statement)
    {
      NotificationChain msgs = null;
      if (case_statement != null)
        msgs = ((InternalEObject)case_statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT, null, msgs);
      if (newCase_statement != null)
        msgs = ((InternalEObject)newCase_statement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT, null, msgs);
      msgs = basicSetCase_statement(newCase_statement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT, newCase_statement, newCase_statement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT:
        return basicSetIf_statement(null, msgs);
      case PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT:
        return basicSetCase_statement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT:
        return getIf_statement();
      case PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT:
        return getCase_statement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT:
        setIf_statement((if_statement)newValue);
        return;
      case PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT:
        setCase_statement((case_statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT:
        setIf_statement((if_statement)null);
        return;
      case PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT:
        setCase_statement((case_statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CONDITIONAL_STATEMENT__IF_STATEMENT:
        return if_statement != null;
      case PascalPackage.CONDITIONAL_STATEMENT__CASE_STATEMENT:
        return case_statement != null;
    }
    return super.eIsSet(featureID);
  }

} //conditional_statementImpl
