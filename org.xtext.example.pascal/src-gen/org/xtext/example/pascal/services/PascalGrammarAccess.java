/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.pascal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.Begin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Begin:
		//	Function | Procedure;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//Procedure
		public RuleCall getProcedureParserRuleCall_1() { return cProcedureParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFunctionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cReturnKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cNameAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_0_5_0 = (RuleCall)cNameAssignment_0_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFunctionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cTypeParserRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cNameAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_6_1_0 = (RuleCall)cNameAssignment_1_6_1.eContents().get(0);
		private final Keyword cColonKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_1_6_3 = (RuleCall)cGroup_1_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cColonKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cReturnKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Assignment cNameAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cNameIDTerminalRuleCall_1_10_0 = (RuleCall)cNameAssignment_1_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		
		//// Por enquanto está bem simples... Só para testar
		// Function:
		//	'function' name=ID '()' ':' 'return' name=ID ';' |
		//	'function' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ':' 'return' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '()' ':' 'return' name=ID ';' | 'function' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')'
		//':' 'return' name=ID ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'function' name=ID '()' ':' 'return' name=ID ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'function'
		public Keyword getFunctionKeyword_0_0() { return cFunctionKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_2() { return cLeftParenthesisRightParenthesisKeyword_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//'return'
		public Keyword getReturnKeyword_0_4() { return cReturnKeyword_0_4; }
		
		//name=ID
		public Assignment getNameAssignment_0_5() { return cNameAssignment_0_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_5_0() { return cNameIDTerminalRuleCall_0_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }
		
		//'function' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ':' 'return' name=ID ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'function'
		public Keyword getFunctionKeyword_1_0() { return cFunctionKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }
		
		//':'
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_5() { return cTypeParserRuleCall_1_5; }
		
		//(';' name=ID ':' Type)*
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6_0() { return cSemicolonKeyword_1_6_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_6_1() { return cNameAssignment_1_6_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_6_1_0() { return cNameIDTerminalRuleCall_1_6_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_6_2() { return cColonKeyword_1_6_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_6_3() { return cTypeParserRuleCall_1_6_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//':'
		public Keyword getColonKeyword_1_8() { return cColonKeyword_1_8; }
		
		//'return'
		public Keyword getReturnKeyword_1_9() { return cReturnKeyword_1_9; }
		
		//name=ID
		public Assignment getNameAssignment_1_10() { return cNameAssignment_1_10; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_10_0() { return cNameIDTerminalRuleCall_1_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_11() { return cSemicolonKeyword_1_11; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.Procedure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cProcedureKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cProcedureKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cTypeParserRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cNameAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_6_1_0 = (RuleCall)cNameAssignment_1_6_1.eContents().get(0);
		private final Keyword cColonKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_1_6_3 = (RuleCall)cGroup_1_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cSemicolonKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//Procedure:
		//	'procedure' name=ID '()' ';' |
		//	'procedure' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'procedure' name=ID '()' ';' | 'procedure' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'procedure' name=ID '()' ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'procedure'
		public Keyword getProcedureKeyword_0_0() { return cProcedureKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_2() { return cLeftParenthesisRightParenthesisKeyword_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//'procedure' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'procedure'
		public Keyword getProcedureKeyword_1_0() { return cProcedureKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }
		
		//':'
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_5() { return cTypeParserRuleCall_1_5; }
		
		//(';' name=ID ':' Type)*
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6_0() { return cSemicolonKeyword_1_6_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_6_1() { return cNameAssignment_1_6_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_6_1_0() { return cNameIDTerminalRuleCall_1_6_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_6_2() { return cColonKeyword_1_6_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_6_3() { return cTypeParserRuleCall_1_6_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//';'
		public Keyword getSemicolonKeyword_1_8() { return cSemicolonKeyword_1_8; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.Type");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final BeginElements pBegin;
	private final FunctionElements pFunction;
	private final ProcedureElements pProcedure;
	private final TypeElements pType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBegin = new BeginElements();
		this.pFunction = new FunctionElements();
		this.pProcedure = new ProcedureElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.pascal.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Begin:
	//	Function | Procedure;
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//// Por enquanto está bem simples... Só para testar
	// Function:
	//	'function' name=ID '()' ':' 'return' name=ID ';' |
	//	'function' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ':' 'return' name=ID ';';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Procedure:
	//	'procedure' name=ID '()' ';' |
	//	'procedure' name=ID '(' name=ID ':' Type (';' name=ID ':' Type)* ')' ';';
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Type:
	//	INT;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
