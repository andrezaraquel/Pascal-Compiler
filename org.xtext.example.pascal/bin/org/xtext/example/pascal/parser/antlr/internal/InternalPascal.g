/*
 * generated by Xtext 2.10.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.pascal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Begin";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBegin
entryRuleBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeginRule()); }
	iv_ruleBegin=ruleBegin
	{ $current=$iv_ruleBegin.current; }
	EOF;

// Rule Begin
ruleBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBeginAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current = $this_Function_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBeginAccess().getProcedureParserRuleCall_1());
		}
		this_Procedure_1=ruleProcedure
		{
			$current = $this_Procedure_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='function'
			{
				newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='()'
			{
				newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisRightParenthesisKeyword_0_2());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getColonKeyword_0_3());
			}
			otherlv_4='return'
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getReturnKeyword_0_4());
			}
			(
				(
					lv_name_5_0=RULE_ID
					{
						newLeafNode(lv_name_5_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_5_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getSemicolonKeyword_0_6());
			}
		)
		    |
		(
			otherlv_7='function'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getFunctionKeyword_1_0());
			}
			(
				(
					lv_name_8_0=RULE_ID
					{
						newLeafNode(lv_name_8_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					lv_name_10_0=RULE_ID
					{
						newLeafNode(lv_name_10_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_11=':'
			{
				newLeafNode(otherlv_11, grammarAccess.getFunctionAccess().getColonKeyword_1_4());
			}
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_5());
			}
			ruleType
			{
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_13=';'
				{
					newLeafNode(otherlv_13, grammarAccess.getFunctionAccess().getSemicolonKeyword_1_6_0());
				}
				(
					(
						lv_name_14_0=RULE_ID
						{
							newLeafNode(lv_name_14_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_6_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFunctionRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_14_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_15=':'
				{
					newLeafNode(otherlv_15, grammarAccess.getFunctionAccess().getColonKeyword_1_6_2());
				}
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getTypeParserRuleCall_1_6_3());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)*
			otherlv_17=')'
			{
				newLeafNode(otherlv_17, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_1_7());
			}
			otherlv_18=':'
			{
				newLeafNode(otherlv_18, grammarAccess.getFunctionAccess().getColonKeyword_1_8());
			}
			otherlv_19='return'
			{
				newLeafNode(otherlv_19, grammarAccess.getFunctionAccess().getReturnKeyword_1_9());
			}
			(
				(
					lv_name_20_0=RULE_ID
					{
						newLeafNode(lv_name_20_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_10_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_20_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_21=';'
			{
				newLeafNode(otherlv_21, grammarAccess.getFunctionAccess().getSemicolonKeyword_1_11());
			}
		)
	)
;

// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	iv_ruleProcedure=ruleProcedure
	{ $current=$iv_ruleProcedure.current; }
	EOF;

// Rule Procedure
ruleProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='procedure'
			{
				newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcedureRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='()'
			{
				newLeafNode(otherlv_2, grammarAccess.getProcedureAccess().getLeftParenthesisRightParenthesisKeyword_0_2());
			}
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		(
			otherlv_4='procedure'
			{
				newLeafNode(otherlv_4, grammarAccess.getProcedureAccess().getProcedureKeyword_1_0());
			}
			(
				(
					lv_name_5_0=RULE_ID
					{
						newLeafNode(lv_name_5_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcedureRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					lv_name_7_0=RULE_ID
					{
						newLeafNode(lv_name_7_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcedureRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getProcedureAccess().getColonKeyword_1_4());
			}
			{
				newCompositeNode(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_5());
			}
			ruleType
			{
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_10=';'
				{
					newLeafNode(otherlv_10, grammarAccess.getProcedureAccess().getSemicolonKeyword_1_6_0());
				}
				(
					(
						lv_name_11_0=RULE_ID
						{
							newLeafNode(lv_name_11_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_6_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProcedureRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_11_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_12=':'
				{
					newLeafNode(otherlv_12, grammarAccess.getProcedureAccess().getColonKeyword_1_6_2());
				}
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getTypeParserRuleCall_1_6_3());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)*
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_1_7());
			}
			otherlv_15=';'
			{
				newLeafNode(otherlv_15, grammarAccess.getProcedureAccess().getSemicolonKeyword_1_8());
			}
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getTypeAccess().getINTTerminalRuleCall());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
